// common.js
function getNumber(str) {
    return parseInt(str.replace(/\s/g, ''));
}

function number_format(number, decimals, dec_point, thousands_sep) {
    var i, j, kw, kd, km;
    if (isNaN(decimals = Math.abs(decimals))) {
        decimals = 2;
    }
    if (dec_point == undefined) {
        dec_point = ",";
    }
    if (thousands_sep == undefined) {
        thousands_sep = ".";
    }
    i = parseInt(number = (+number || 0).toFixed(decimals)) + "";
    if ((j = i.length) > 3) {
        j = j % 3;
    } else {
        j = 0;
    }
    km = (j ? i.substr(0, j) + thousands_sep : "");
    kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);
    kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");
    return km + kw + kd;
}

function imageResize(src) {
    $('img').not('.logo__img').attr('src', src);
}

// imageResize('https://loremflickr.com/320/440');

const wWidth = $(window).width();

// Функция убирает прокрутку страницы
function setOverflow() {
    $('body').addClass('overflow');
}

// Функция возвращает прокрутку страницы
function removeOverflow() {
    $('body').removeClass('overflow');
}

if (wWidth < 700) {
    $('table').each(function (x, i) {
        let $table = $(i),
            $th = $table.find('thead').find('th'),
            $tr = $table.find('tbody').find('tr');

        $table.html(getTable($tr, $th));
    });
}

function getTable($tr, $th) {
    let tbody = $('<tbody>');

    $tr.each(function (x, i) {
        let cls = '';
        if ((x + 1) % 2 == 1) {
            cls = 'grey';
        }
        tbody.append(getTrs($(i), $th, cls));
    });


    return tbody;
}

function getTrs(tr, $th, cls) {
    let trArr = [],
        tds = tr.find('td'),
        leng = tds.length;

    tds.each(function (x, i) {

        let newTr = $('<tr>').addClass(cls),
            td = $(i);

        if (x == 0) {
            newTr.addClass('first');
        }
        newTr.append($('<td>').html($($th[x]).html()));
        newTr.append(td);
        trArr.push(newTr);
    });

    return trArr;
}

const popup = $('.popup'),
    popupWrap = popup.find('.popup__wrapper');


function getForm(cls) {
    let template = $(tmpl.content),
        form = template.find(cls).clone();
    return form;
}

function openForm(form) {
    popupWrap.html(form);
    popup.addClass('active');
    $('body').addClass('ovh');
}

function closePopup() {
    popup.removeClass('active');
    popupWrap.html();
    $('body').removeClass('ovh');
}

$('input[type=tel]').mask('+7 (999) 999-99-99');

$('.select').styler();

let swNoMove = false,
    swsSwiper = {};


$(window).scroll(function () {

    $('.tab:in-viewport(100)').is(function () {
        let id = $(this).attr('id'),
            sw = $('.sw[data-id="' + id + '"]'),
            sws = $('.sw');

        if (!swNoMove) {
            if (!sw.hasClass('active')) {
                sws.removeClass('active');
                sw.addClass('active');

                swsSwiper.slideTo($(swsSwiper.slides).index(sw));
            }
        }
    });

});

$(document).ready(function () {
    $('.tab:in-viewport(100)').is(function (){
        let id = $(this).attr('id'),
            sw = $('.sw[href="#' + id + '"]'),
            sws = $('.sw');

        sws.removeClass('active');
        sw.addClass('active');
    });
});

var map;

function initAddr() {
    // Подключаем поисковые подсказки к полю ввода.
    var suggestView = new ymaps.SuggestView('suggest'),
        placemark;

    // При клике по кнопке запускаем верификацию введёных данных.
    $('#suggest').on('change', function (e) {
        geocode();
    });

    $('.pmsearch__clear').on('click', function (e) {
        $(this).closest('.pmsearch__addr').removeClass('active');
        $('#suggest').val('');
        deleteMap();
    });

}

function geocode() {
    // Забираем запрос из поля ввода.
    var request = $('#suggest').val();
    // Геокодируем введённые данные.
    ymaps.geocode(request).then(function (res) {
        var obj = res.geoObjects.get(0),
            error, hint;

        if (obj) {
            // Об оценке точности ответа геокодера можно прочитать тут: https://tech.yandex.ru/maps/doc/geocoder/desc/reference/precision-docpage/
            switch (obj.properties.get('metaDataProperty.GeocoderMetaData.precision')) {
                case 'exact':
                    break;
                case 'number':
                case 'near':
                case 'range':
                    error = 'Уточните номер дома';
                    hint = 'Уточните номер дома';
                    break;
                case 'street':
                    error = 'Уточните номер дома';
                    hint = 'Уточните номер дома';
                    break;
                case 'other':
                default:
                    error = 'Уточните адрес';
                    hint = 'Уточните адрес';
            }
        } else {
            error = 'Адрес не найден';
            hint = 'Уточните адрес';
        }

        // Если геокодер возвращает пустой массив или неточный результат, то показываем ошибку.
        if (error) {
            showError(error);
            showMessage(hint);
        } else {
            showResult(obj);
        }
    }, function (e) {
        console.log(e)
    })

}

function showResult(obj) {
    // Удаляем сообщение об ошибке, если найденный адрес совпадает с поисковым запросом.
    $('#suggest').removeClass('input_error');
    $('#notice').css('display', 'none');
    $('.pmsearch__addr').addClass('active');

    var mapContainer = $('#pmap'),
        bounds = obj.properties.get('boundedBy'),
        // Рассчитываем видимую область для текущего положения пользователя.
        mapState = ymaps.util.bounds.getCenterAndZoom(
            bounds,
            [mapContainer.width(), mapContainer.height()]
        ),
        // Сохраняем полный адрес для сообщения под картой.
        address = [obj.getCountry(), obj.getAddressLine()].join(', '),
        addressCity = [obj.getAddressLine()].join(', '),
        // Сохраняем укороченный адрес для подписи метки.
        shortAddress = [obj.getThoroughfare(), obj.getPremiseNumber(), obj.getPremise()].join(' ');
    // Убираем контролы с карты.
    mapState.controls = [];
    // Создаём карту.
    createMap(mapState, shortAddress);
    // Выводим сообщение под картой.
    showMessage(address, addressCity);
}

function showError(message) {
    $('#notice').text(message);
    $('#suggest').addClass('input_error');
    $('#notice').css('display', 'block');
    deleteMap();
}

function createMap(state, caption) {
    // Если карта еще не была создана, то создадим ее и добавим метку с адресом.
    if (!map) {
        map = new ymaps.Map('pmap', state);
        placemark = new ymaps.Placemark(
            map.getCenter(), {
                iconCaption: caption,
                balloonContent: caption
            }, {
                preset: 'islands#redDotIconWithCaption'
            });
        map.geoObjects.add(placemark);
        // Если карта есть, то выставляем новый центр карты и меняем данные и позицию метки в соответствии с найденным адресом.
    } else {
        map.setCenter(state.center, state.zoom);
        placemark.geometry.setCoordinates(state.center);
        placemark.properties.set({iconCaption: caption, balloonContent: caption});
    }
}

function showMessage(message, address) {
    $('input[name="searchAddr"]').val(address);
    $('#suggest').blur();
    $('#messageHeader').text('Данные получены:');
    $('#message').text(message);
}

function deleteMap() {
    $('input[name="searchAddr"]').val('');
    // Удаляем карту.
    if (map) {
        map.destroy();
        map = null;
    }
}

function initTimer(form) {

    let field = form.find('.reg__timer-val'),
        count = 60;

    form.find('.reg__timer').removeClass('refresh jsRegSms');
    form.find('.reg__timer').addClass('active');

    let timer = setInterval(() => {
        count = count - 1;
        if (String(count).length < 2) {
            field.text('0:0' + count);
        } else {
            field.text('0:' + count);
        }


        if (count <= 0) {
            clearInterval(timer);
            form.find('.reg__timer').attr('type', 'submit').addClass('refresh jsRegSms');
        }
    }, 1000);
}






//index.js
$(function () {

    let navSwiper = new Swiper('.hnav__container', {
        slidesPerView: 'auto',
        spaceBetween: 20,
    });

    if (wWidth < 740) {
        let iactionsSwiper = new Swiper('.iactions__container', {
            slidesPerView: '1',
            spaceBetween: 10,
            watchSlidesVisibility: true,
            // If we need pagination
            pagination: {
                el: '.iactions__pag',
            },
        });
    }


    swsSwiper = new Swiper('.sws', {
        slidesPerView: 'auto',
        spaceBetween: 25,
        centeredSlides:true,
        centeredSlidesBounds: true,
        breakpoints: {
            767: {
                spaceBetween: 40,
                centeredSlides:false,
                centeredSlidesBounds: false,
            },
            1199: {
                spaceBetween: 50,
                centeredSlides:false,
                centeredSlidesBounds: false,
            },
        },
        on: {
            click: function () {

                swNoMove = true;

                let index = this.clickedIndex,
                    sw = $(this.slides[index]),
                    id = sw.data('id'),
                    tab = $('#' + id),
                    sws = $('.sw');
                this.slideTo(this.clickedIndex);
                sws.removeClass('active');
                sw.addClass('active');
                $("html, body").animate(
                    {scrollTop: $(tab).offset().top + "px"},
                    function () {
                        setTimeout(function () {
                            swNoMove = false;
                        }, 1000)
                    }
                )

            }
        }
    });


    $('body').on('click', '.jsSw', function (e) {
        let $this = $(this),
            parent = $this.closest('.jsSwsTabs'),
            sws = parent.find('.jsSw'),
            tabs = parent.find('.jsTab'),
            tab = $(tabs[sws.index($this)]);

        sws.removeClass('active');
        tabs.removeClass('active');
        $this.addClass('active');
        tab.addClass('active');
        $('input, select').trigger('refresh');
    });

    if (wWidth < 768) {
        $('.jsCartOpen').on('click', function (e) {
            e.preventDefault();
            $(this).closest('.fcart').toggleClass('active');
            if ($(this).closest('.fcart').hasClass('active')) {
                $('body').addClass('ovh');
            } else {
                $('body').removeClass('ovh');
            }
        });
    }

});
/*YANDEX*/

var myMap = {
    map: '',
    placemarks: []
};
$(function () {
    ymaps.ready(init);



    function init() {

        var cmap = document.querySelector('#map');

        if (cmap) {
            var data = cmap.dataset,
                center = data.center;

            myMap.map = new ymaps.Map("map", {
                center: [data.centerX,data.centerY],
                zoom: data.zoom,
            });


            myMap.map.behaviors.disable(['scrollZoom']);



            $('.contact__link').each(function (x,i) {
                addPin(i.dataset);
            });

        }
    }

    function addPin(settings) {
       var pin = new ymaps.GeoObjectCollection(),
           placemark = new ymaps.Placemark([settings.baloonX,settings.baloonY], {
                balloonContentHeader: settings.baloonHeader,
                balloonContentBody: settings.baloonBody,
                balloonContentFooter: settings.baloonFooter,
                hintContent: settings.baloonContent
            },
            {
                iconLayout: 'default#image',
                preset: 'islands#redGlyphIcon'
            });
        pin.add(placemark);
        myMap.placemarks.push([settings.baloonX,settings.baloonY]);
        myMap.map.geoObjects.add(pin);

    }

    $('.contact__link').on('click', function (e) {

        myMap.map.setCenter(myMap.placemarks[this.dataset.id],17,{
            checkZoomRange: true
        });

    });
});
/*END YANDEX*/
//index.js
$(function () {

    let addSwiper = new Swiper('.basket__adds', {
        slidesPerView: 3,
        spaceBetween: 10,
        watchOverflow: true,
        // Navigation arrows
        navigation: {
            nextEl: '.basket__next',
            prevEl: '.basket__prev',
        },
        breakpoints: {
            // when window width is >= 768px
            768: {
                slidesPerView: 4,
                spaceBetween: 20,
            },
            // when window width is >= 1200px
            1200: {
                slidesPerView: 5,
                spaceBetween: 20,
            }
        }
    });

    //ввод цифр в поля
    $('.ocash__input').on('keypress', function (e) {
        if (e.key.match(/[^0-9]/g) || (this.value == 0 && e.key == 0)) {
            e.preventDefault();
        }
    });

    $('.ocard').card({
        // a selector or DOM element for the container
        // where you want the card to appear
        container: '.card-wrapper', // *required*

        // all of the other options from above
        formSelectors: {
            numberInput: 'input[name="cardNumber"]', // optional — default input[name="number"]
            nameInput: 'input[name="cardName"]', // optional — default input[name="number"]
            expiryInput: 'input[name="cardPeriod"]', // optional — default input[name="expiry"]
            cvcInput: 'input[name="cardCvc"]', // optional — default input[name="cvc"]
        },
        formatting: true, // optional - default true
        // if true, will log helpful messages for setting up Card
        debug: true // optional - default false
    });

    $('.input__edit').on('click', function (e) {
        e.preventDefault();
        $(this).prev().attr('readonly', false);
    });

    $('.jsAccountEditContacts').on('click', function (e) {
        e.preventDefault();
        openForm(getForm('.accontacts'));
    });

    $('.jsDelivery').on('click', function (e) {
        e.preventDefault();
        openForm(getForm('.delivery'));
        $('.select').styler();
    });

    $('body').on('click', function (e) {
        let target = $(e.target);
        if (target.closest('.jsInfo').length == 0) {
            closeInfos();
        }
    });

    $('body').on('click', '.jsInfoBtn', function (e) {
        e.preventDefault();
        closeInfos();
        $(this).toggleClass('active');
        $(this).next().toggleClass('active');

    });

    function closeInfos() {
        $('.jsInfoBtn').removeClass('active');
        $('.jsInfoContent').removeClass('active');
    }

});
//mmenu.js
$(function () {
    // VARIABLES

    // EVENTS
    // Переходм между вкладками
    $('.jsOpenWrap').on('click', function (e) {
        e.preventDefault();
        let $this = $(this),
            wrapper = $this.find('.mmitem__wrap');

        wrapper.addClass('active');
    });

    //Закрытие вкладки
    $('.jsWrapClose').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        let btn = $(this),
            wrap= btn.closest('.mmenu__wrap');
        wrap.removeClass('active');
    });

    // Открытие меню
    $('.jsMenuOpen').on('click', function (e) {
        e.preventDefault();
        openMenu();
    });

    //Закрытие меню
    $('body').on('click', function (e) {
        let target = $(e.target);

        if (target.hasClass('mmenu active') || target.closest('.jsMenuClose').length > 0) {
            closeMenu();
        }
    });


    // FUNCTIONS
    // Функция отрытия меню
    function openMenu() {
        let menu = $('.mmenu');
        menu.addClass('active');
        setOverflow();
    }

    // Функция закрытия меню
    function closeMenu() {
        let menu = $('.mmenu'),
            wrappers = menu.find('mmenu__wrap');
        menu.removeClass('active');
        wrappers.removeClass('active');
        removeOverflow();
    }


    //VENDORS
});
//popup.js
$(function () {

    //VARIABLES

    //EVENTS
    popup.on('click', function (e) {
        let target = $(e.target);

        if (target.closest('.popup__wrapper').length == 0) {
            closePopup();
        }
        if (target.closest('.prinfo').length == 0) {
            $('.prinfo__btn').removeClass('active');
            $('.prinfo__content').removeClass('active');
        }
    });

    $('body',).on('click', '.jsFormClose', function (e) {
        e.preventDefault();
        closePopup();
    });

    $('.jsSelectCity').on('click', function (e) {
        e.preventDefault();
        openForm(getForm('.cities'));
    });

    $('body').on('click', '.pitem', function (e) {
        e.preventDefault();
        let $this = $(this),
            src = $this.find('img').attr('src'),
            title = $this.find('.pitem__title').text(),
            text = $this.find('.pitem__txt').text(),
            char = $this.find('.pitem__char').text(),
            product = $this.closest('.product');

        if (wWidth < 768) {
            product.find('.product__wrap-img img').attr('src', src);
        } else {
            product.find('.product__img img').attr('src', src);
        }
        product.find('.product__wrap-title').text(title);
        product.find('.product__wrap-desc').text(text);
        product.find('.product__wrap-char').text(char);

        $('.product__wrap').addClass('active');
        $('.pitem').removeClass('active');
        $this.addClass('active');
    });

    $('body').on('click', '.product__wrap-close', function (e) {
        e.preventDefault();
        $(this).closest('.product__wrap').removeClass('active');
        $('.pitem').removeClass('active');
    });

    $('body').on('click', '.prinfo__btn', function (e) {
        e.preventDefault();

        $(this).toggleClass('active');
        $(this).next().toggleClass('active');

    });

    $('.jsReg').on('click', function (e) {
        e.preventDefault();
        openForm(getForm('.reg'));
        $('input[type=tel]').mask('+7 (999) 999-99-99');
    });

    $('body').on('click', '.jsRegSms', function (e) {
        e.preventDefault();

        let form = $(this).closest('.reg');
        form.find('input[name=action]').val('sms');
        form.trigger('submit');
    });

    //FUNCTIONS


    //VENDORS

});


//popup.js
$(function () {

    //VARIABLES

    //EVENTS

    //FUNCTIONS

    //VENDORS


});


//# sourceMappingURL=main.min.js.map